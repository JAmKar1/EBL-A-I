import telebot
from telebot import types
import os

bot = telebot.TeleBot('7918889338:AAF2f5gpw2Hp9E_yjRKbeFkNjD4d9giLmPg')

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
user_states = {}
last_message_ids = {}

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
RANDOM_TRAINING_PATH = 'D:\\TelegramBot\\BOT\\Random'

def delete_previous_messages(chat_id):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞."""
    if chat_id in last_message_ids:
        for msg_id in last_message_ids[chat_id]:
            try:
                bot.delete_message(chat_id, msg_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        last_message_ids[chat_id] = []

def send_message_with_delete(chat_id, text, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ."""
    delete_previous_messages(chat_id)
    msg = bot.send_message(chat_id, text, reply_markup=reply_markup)
    if chat_id not in last_message_ids:
        last_message_ids[chat_id] = []
    last_message_ids[chat_id].append(msg.message_id)

@bot.message_handler(commands=['start'])
def start_command(message):
    send_message_with_delete(message.chat.id, "üéâ –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –ø–æ –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥—É.")
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEL_FZnl8N4ENngAmvarOHf0wABn5x9bXgAAjxpAAL9CblIqU6FdSNFcSQ2BA')
    show_main_menu(message)

def show_main_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üèãüèª‚Äç‚ôÇÔ∏è –ü–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥", callback_data='powerlifting')
    )
    markup.row(
        types.InlineKeyboardButton("üí™üèª –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥", callback_data='bodybuilding')
    )
    markup.row(
        types.InlineKeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data='random_training')
    )
    send_message_with_delete(message.chat.id, "–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'powerlifting')
def handle_powerlifting_choice(call):
    show_powerlifting_options(call.message)

def show_powerlifting_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üü¢ –ù–∞—á–∞–ª—å–Ω—ã–π", callback_data='–ù–∞—á–∞–ª—å–Ω—ã–π')
    )
    markup.row(
        types.InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data='–°—Ä–µ–¥–Ω–∏–π')
    )
    markup.row(
        types.InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data='–í—ã—Å–æ–∫–∏–π')
    )
    markup.row(
        types.InlineKeyboardButton("üìö –ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏", callback_data='–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–µ–º –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'bodybuilding')
def handle_bodybuilding_choice(call):
    show_bodybuilding_options(call.message)

def show_bodybuilding_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üßîüèª –ú—É–∂—á–∏–Ω–∞", callback_data='men')
    )
    markup.row(
        types.InlineKeyboardButton("üë©üèª –ñ–µ–Ω—â–∏–Ω–∞", callback_data='women')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'random_training')
def handle_random_training_choice(call):
    show_random_training_levels(call.message)

def show_random_training_levels(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π", callback_data='easy')
    )
    markup.row(
        types.InlineKeyboardButton("üü† –°—Ä–µ–¥–Ω–∏–π", callback_data='medium')
    )
    markup.row(
        types.InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data='hard')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['easy', 'medium', 'hard'])
def handle_random_level_choice(call):
    user_states[call.message.chat.id] = {"training_level": call.data}
    show_training_categories(call.message)

def show_training_categories(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üèãÔ∏è –°–ø–∏–Ω–∞", callback_data='back_training')
    )
    markup.row(
        types.InlineKeyboardButton("ü¶µ –ù–æ–≥–∏", callback_data='legs_training')
    )
    markup.row(
        types.InlineKeyboardButton("üí™ –†—É–∫–∏", callback_data='arms_training')
    )
    markup.row(
        types.InlineKeyboardButton("üèãÔ∏è‚ôÇÔ∏è –ì—Ä—É–¥—å", callback_data='chest_training')
    )
    markup.row(
        types.InlineKeyboardButton("ü§∏ –ü–ª–µ—á–∏", callback_data='shoulders_training')
    )
    markup.row(
        types.InlineKeyboardButton("üî• –ì—Ä—É–¥—å+–°–ø–∏–Ω–∞", callback_data='chest_back_training')
    )
    markup.row(
        types.InlineKeyboardButton("üí• –†—É–∫–∏+–ü–ª–µ—á–∏", callback_data='arms_shoulders_training')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in [
    'back_training', 'legs_training', 'arms_training', 'chest_training',
    'shoulders_training', 'chest_back_training', 'arms_shoulders_training'
])
def handle_training_category(call):
    user_state = user_states.get(call.message.chat.id, {})
    if not user_state.get("training_level"):
        send_message_with_delete(call.message.chat.id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        return show_main_menu(call.message)
    
    category = call.data
    send_training_file(call.message, user_state["training_level"], category)

def send_training_file(message, level, category):
    category_mapping = {
        'back_training': "Back",
        'legs_training': "Legs",
        'arms_training': "Arms",
        'chest_training': "Chest",
        'shoulders_training': "Shoulders",
        'chest_back_training': "Chest+Back",
        'arms_shoulders_training': "Arms+Shoulders"
    }
    
    level_mapping = {
        'easy': "Easy",
        'medium': "Medium",
        'hard': "Hard"
    }
    
    try:
        file_name = f"{category_mapping[category]}.xlsx"
        file_path = os.path.join(
            RANDOM_TRAINING_PATH,
            level_mapping[level],
            file_name
        )
        
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                bot.send_document(message.chat.id, file)
                send_message_with_delete(message.chat.id, f"‚úÖ {category_mapping[category]} - {level_mapping[level]}\n–ü—Ä–∏—è—Ç–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
        else:
            send_message_with_delete(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        send_message_with_delete(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        user_states.pop(message.chat.id, None)

@bot.callback_query_handler(func=lambda call: call.data == 'men')
def handle_bodybuilding_men(call):
    user_states[call.message.chat.id] = {"gender": "men"}
    show_men_bodybuilding_options(call.message)

def show_men_bodybuilding_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π", callback_data='men_easy')
    )
    markup.row(
        types.InlineKeyboardButton("üü† –°—Ä–µ–¥–Ω–∏–π", callback_data='men_medium')
    )
    markup.row(
        types.InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data='men_hard')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞ –¥–ª—è üßîüèª–º—É–∂—á–∏–Ω:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'women')
def handle_bodybuilding_women(call):
    user_states[call.message.chat.id] = {"gender": "women"}
    show_women_bodybuilding_options(call.message)

def show_women_bodybuilding_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üü¢ –õ–µ–≥–∫–∏–π", callback_data='women_easy')
    )
    markup.row(
        types.InlineKeyboardButton("üü† –°—Ä–µ–¥–Ω–∏–π", callback_data='women_medium')
    )
    markup.row(
        types.InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data='women_hard')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥–∞ –¥–ª—è üë©üèª–∂–µ–Ω—â–∏–Ω:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['men_easy', 'men_medium', 'men_hard', 'women_easy', 'women_medium', 'women_hard'])
def handle_bodybuilding_levels(call):
    user_state = user_states.get(call.message.chat.id, {})
    user_state["level"] = call.data
    user_states[call.message.chat.id] = user_state
    show_training_options(call.message)

def show_training_options(message):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üìù 2—Ö2", callback_data='2x2')
    )
    markup.row(
        types.InlineKeyboardButton("üìù 1—Ö3", callback_data='1x3')
    )
    markup.row(
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    )
    send_message_with_delete(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['2x2', '1x3'])
def handle_training_scheme(call):
    user_state = user_states.get(call.message.chat.id, {})
    scheme = call.data
    if user_state.get("gender") and user_state.get("level"):
        send_bodybuilding_file(call.message, user_state["gender"], user_state["level"], scheme)
    else:
        send_message_with_delete(call.message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        show_main_menu(call.message)

def send_bodybuilding_file(message, gender, level, scheme):
    file_paths = {
        "men": {
            "men_easy": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –õ–µ–≥–∫–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –õ–µ–≥–∫–∏–π 1—Ö3.xlsx'
            },
            "men_medium": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –°—Ä–µ–¥–Ω–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –°—Ä–µ–¥–Ω–∏–π 1—Ö3.xlsx'
            },
            "men_hard": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –í—ã—Å–æ–∫–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ú—É–∂—Å–∫–æ–π –í—ã—Å–æ–∫–∏–π 1—Ö3.xlsx'
            }
        },
        "women": {
            "women_easy": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –õ–µ–≥–∫–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –õ–µ–≥–∫–∏–π 1—Ö3.xlsx'
            },
            "women_medium": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –°—Ä–µ–¥–Ω–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –°—Ä–µ–¥–Ω–∏–π 1—Ö3.xlsx'
            },
            "women_hard": {
                "2x2": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –í—ã—Å–æ–∫–∏–π 2—Ö2.xlsx',
                "1x3": 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–µ–Ω—Å–∫–∏–π –í—ã—Å–æ–∫–∏–π 1—Ö3.xlsx'
            }
        }
    }

    try:
        file_path = file_paths[gender][level][scheme]
        if os.path.exists(file_path):
            with open(file_path, 'rb') as file:
                bot.send_document(message.chat.id, file)
                send_message_with_delete(message.chat.id, f"‚úÖ –§–∞–π–ª –¥–ª—è {gender}, —É—Ä–æ–≤–µ–Ω—å {level}, —Å—Ö–µ–º–∞ {scheme}")
        else:
            send_message_with_delete(message.chat.id, "‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except KeyError:
        send_message_with_delete(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        send_message_with_delete(message.chat.id, f"üö® –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        user_states.pop(message.chat.id, None)

@bot.callback_query_handler(func=lambda call: call.data in ['–ù–∞—á–∞–ª—å–Ω—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π', '–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏'])
def handle_powerlifting_levels(call):
    send_excel_file(call.message, call.data)

def send_excel_file(message, level):
    excel_file_paths = {
        '–ù–∞—á–∞–ª—å–Ω—ã–π': 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ù–∞—á–∞–ª—å–Ω—ã–π.xlsx',
        '–°—Ä–µ–¥–Ω–∏–π': 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–°—Ä–µ–¥–Ω–∏–π.xlsx',
        '–í—ã—Å–æ–∫–∏–π': 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–í—ã—Å–æ–∫–∏–π.xlsx',
        '–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏': 'D:\\TelegramBot\\BOT\\BBB\\–ü–∞—É—ç—Ä\\–ñ–∏–º–æ–≤—ã–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏.docx'
    }

    file_path = excel_file_paths.get(level)
    
    if file_path and os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as file:
                bot.send_document(message.chat.id, file)
                send_message_with_delete(message.chat.id, f"–í–æ—Ç —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞: {level}.")
        except Exception as e:
            send_message_with_delete(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    else:
        send_message_with_delete(message.chat.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@bot.callback_query_handler(func=lambda call: call.data == 'back')
def back_handler(call):
    current_state = user_states.get(call.message.chat.id, {})
    
    if current_state.get("training_level"):
        user_states.pop(call.message.chat.id, None)
        show_random_training_levels(call.message)
    elif "level" in current_state:
        if current_state.get("gender") == "men":
            show_men_bodybuilding_options(call.message)
        else:
            show_women_bodybuilding_options(call.message)
        user_states[call.message.chat.id].pop("level", None)
    elif "gender" in current_state:
        show_bodybuilding_options(call.message)
        user_states.pop(call.message.chat.id, None)
    else:
        show_main_menu(call.message)

bot.polling(none_stop=True)
